{"version":3,"sources":["logo.svg","utils/API.js","Components/Form/index.js","Components/GetUsers.js","Components/Container.js/index.js","Components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","get","Form","useState","searchPerson","setSearchPerson","className","value","name","onChange","event","console","log","target","type","placeholder","EmployeesContainer","users","setUsers","loading","setLoading","useEffect","API","then","res","data","results","catch","err","length","scope","map","user","i","key","src","picture","large","alt","first","last","cell","email","dob","date","split","Container","props","style","children","Jumbotron","App","GetUsers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,6ICE5B,EAED,WACN,OAAOC,IAAMC,IAAI,0CC2BVC,MA9Bf,WAAiB,IAAD,EAC4BC,mBAAS,IADrC,mBACLC,EADK,KACSC,EADT,KAeZ,OACI,6BACI,0BAAMC,UAAU,yBACZ,2BAAOC,MAAOH,EACdI,KAAO,SACPC,SAdZ,SAA4BC,GAIxBC,QAAQC,IAAI,kBAAmBF,EAAMG,OAAON,OAC5CF,EAAgBK,EAAMG,OAAON,QAUrBO,KAAK,OACLC,YAAY,mBC2CbC,MA/Df,WAAgC,IAAD,EACDb,mBAAS,IADR,mBACpBc,EADoB,KACbC,EADa,OAEGf,oBAAS,GAFZ,mBAEpBgB,EAFoB,KAEXC,EAFW,KAsBvB,OAjBJT,QAAQC,IAAI,0BAA2B,CAACV,SAKxCmB,qBAAW,WACPC,IACCC,MAAK,SAAAC,GAEFb,QAAQC,IAAI,QAASY,EAAIC,KAAKC,SAC9BR,EAAUM,EAAIC,KAAKC,SAEnBN,GAAW,MAEdO,OAAM,SAAAC,GAAG,OAAIjB,QAAQC,IAAIgB,QAC3B,IAEIT,EACQ,2CAGFF,EAAMY,OAOX,6BACA,2BAAOvB,UAAU,mCACb,+BACI,4BACA,wBAAIwB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACKb,EAAMc,KAAI,SAACC,EAAMC,GAAP,OACP,wBAAIC,IAAG,eAAUD,IACb,4BAAI,yBAAKE,IAAKH,EAAKI,QAAQC,MAAOC,IAAI,uBACtC,4BAAKN,EAAKxB,KAAK+B,MAAf,IAAuBP,EAAKxB,KAAKgC,MACjC,4BAAKR,EAAKS,MACV,4BAAKT,EAAKU,OACV,4BAAKV,EAAKW,IAAIC,KAAKC,MAAM,KAAK,WAxBvC,qDCzBJC,MAJf,SAAmBC,GACjB,OAAO,yBAAKzC,UAAU,YAAY0C,MAAOD,EAAMC,OAAQD,EAAME,WCYhDC,MAbR,SAAmBH,GAEtB,OACI,yBAAKzC,UAAU,6BACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAY,aAAhB,sBACA,+H,MCaD6C,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,SCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAyC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.b581539b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    populate: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=10\");\r\n\r\n    }\r\n}","import React, { useState } from 'react'\r\n\r\nfunction Form() {\r\n    const [searchPerson, setSearchPerson] = useState([]);\r\n\r\n    // -----------------------------------------------------\r\n    // Add functionality for the search bar to filter users eveytime a character is entered\r\n    // -----------------------------------------------------\r\n    function handleInputChange (event) {\r\n        // event.preventDefault();\r\n\r\n        // Getting the value of the input which triggerred the change\r\n        console.log(\"Search person: \", event.target.value);\r\n        setSearchPerson(event.target.value);\r\n    }\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <form className=\"form text-center pb-3\">\r\n                <input value={searchPerson}\r\n                name = \"person\"\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"Search here\"\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Form;","import React, { useState, useEffect, Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Form from \"../Components/Form/index\"\r\n\r\nfunction EmployeesContainer () {\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    \r\n    console.log(\"getUsers searchPerson: \", {Form});\r\n\r\n\r\n\r\n    //perform axios call\r\n    useEffect( () => {\r\n        API.populate()\r\n        .then(res => {\r\n\r\n            console.log(\"res: \", res.data.results)\r\n            setUsers( res.data.results )\r\n            \r\n            setLoading(false)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }, [])\r\n\r\n        if(loading) {\r\n            return <div>loading...</div>;\r\n        }\r\n\r\n        else if(!users.length) {\r\n            return <div>Didnt get any users</div>;\r\n        }\r\n\r\n        else {\r\n        return (\r\n\r\n            <div>\r\n            <table className=\"table table-striped text-center\">\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">Image</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Phone</th>\r\n                    <th scope=\"col\">Email</th>\r\n                    <th scope=\"col\">DOB</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((user, i) => (\r\n                        <tr key={`user-${i}`}>\r\n                            <th><img src={user.picture.large} alt=\"Image of a person\"/></th>\r\n                            <td>{user.name.first} {user.name.last}</td>\r\n                            <td>{user.cell}</td>\r\n                            <td>{user.email}</td>\r\n                            <td>{user.dob.date.split(\"T\")[0]}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default EmployeesContainer;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container\" style={props.style}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react'\r\n\r\nexport function Jumbotron(props) {\r\n\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container text-center\">\r\n                <h1 className = \"display-4\">Employee Directory</h1>\r\n                <p>Please user our searchbar below to find and sort any particular users you may be looking for.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Jumbotron\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GetUsers from \"./Components/GetUsers\"\nimport Container from \"./Components/Container.js/index\"\nimport Jumbotron from \"./Components/Jumbotron/index\"\nimport Form from \"./Components/Form/index\"\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  return (\n    <div>\n      <Jumbotron />\n      <Container>\n        <Form />\n        <GetUsers />\n      </Container>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}