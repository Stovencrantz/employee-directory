{"version":3,"sources":["utils/API.js","Components/TopSearch/index.js","Components/Container/index.js","Components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","columns","label","field","width","sort","TopSearch","useState","users","setUsers","loading","setLoading","datatable","setDatatable","useEffect","API","then","res","console","log","data","results","rows","map","user","i","image","src","picture","large","alt","name","first","last","phone","cell","email","dob","date","split","catch","err","length","hover","entriesOptions","entries","pagesAmount","searchTop","searchBottom","Container","props","className","style","children","Jumbotron","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yUAEe,EAED,WACN,OAAOA,IAAMC,IAAI,2C,QCAnBC,G,MAAU,CACZ,CACEC,MAAO,QACPC,MAAO,QACPC,MAAO,KAET,CACEF,MAAO,OACPC,MAAO,OACPE,KAAM,MACND,MAAO,KAET,CACEF,MAAO,QACPC,MAAO,QACPC,MAAO,KAET,CACEF,MAAO,QACPC,MAAO,QACPE,KAAM,MACND,MAAO,KAET,CACEF,MAAO,MACPC,MAAO,MACPE,KAAM,MACND,MAAO,OAME,SAASE,IAAY,MAENC,mBAAS,IAFH,mBAEzBC,EAFyB,KAElBC,EAFkB,OAGFF,oBAAS,GAHP,mBAGzBG,EAHyB,KAGhBC,EAHgB,OAIEJ,mBAAS,IAJX,mBAIzBK,EAJyB,KAIdC,EAJc,KAkChC,OA3BAC,qBAAW,WACPC,IACCC,MAAK,SAAAC,GAEFC,QAAQC,IAAI,QAASF,EAAIG,KAAKC,SAC9BZ,EAAUQ,EAAIG,KAAKC,SACnBH,QAAQC,IAAI,UAAWX,GACvB,IAAMc,EAAOd,EAAMe,KAAI,SAACC,EAAMC,GAC9B,MAAO,CACHC,MAAO,yBAAKC,IAAKH,EAAKI,QAAQC,MAAOC,IAAI,sBACzCC,KAAMP,EAAKO,KAAKC,MAAQ,IAAMR,EAAKO,KAAKE,KACxCC,MAAQV,EAAKW,KACbC,MAAMZ,EAAKY,MACXC,IAAKb,EAAKa,IAAIC,KAAKC,MAAM,KAAK,OAIlCrB,QAAQC,IAAI,YAAaG,GACzBT,EAAa,CAACZ,QAASA,EAASqB,KAAMA,IAGtCX,GAAW,MAGd6B,OAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,QAC3B,CAAC/B,IAEDA,EACQ,2CAGFF,EAAMkC,OAIJ,kBAAC,IAAD,CAAgBC,OAAK,EAACC,eAAgB,CAAC,EAAG,GAAI,IAAKC,QAAS,EAAGC,YAAa,EAAG1B,KAAMR,EAAWmC,WAAS,EAACC,cAAc,IAHxH,oDCvEAC,MAJf,SAAmBC,GACjB,OAAO,yBAAKC,UAAU,YAAYC,MAAOF,EAAME,OAAQF,EAAMG,W,YCehDC,MAbR,SAAmBJ,GAEtB,OACI,yBAAKC,UAAU,qCACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAY,aAAhB,sBACA,kICMDI,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAACjD,EAAD,SCCYkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.a25bcfea.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n\r\n    populate: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=300\");\r\n\r\n    }\r\n}","import React, { useState, useEffect, Component } from 'react';\r\nimport API from \"../../utils/API\";\r\nimport { MDBDataTableV5 } from 'mdbreact';\r\nimport \"./style.css\"\r\n\r\nconst columns = [\r\n    {\r\n      label: 'Image',\r\n      field: 'image',\r\n      width: 150,\r\n    },\r\n    {\r\n      label: 'Name',\r\n      field: 'name',\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: 'Phone',\r\n      field: 'phone',\r\n      width: 200,\r\n    },\r\n    {\r\n      label: 'Email',\r\n      field: 'email',\r\n      sort: 'asc',\r\n      width: 100,\r\n    },\r\n    {\r\n      label: 'DOB',\r\n      field: 'dob',\r\n      sort: 'asc',\r\n      width: 150,\r\n    },\r\n\r\n  ]\r\n\r\n\r\nexport default function TopSearch() {\r\n    //Initialize states for containers for our user values and if we are still getting data from our api\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true)\r\n    const [datatable, setDatatable] = useState({})\r\n\r\n    //perform axios call\r\n    useEffect( () => {\r\n        API.populate()\r\n        .then(res => {\r\n\r\n            console.log(\"res: \", res.data.results)\r\n            setUsers( res.data.results )\r\n            console.log(\"Users: \", users);\r\n            const rows = users.map((user, i) => {        \r\n            return {\r\n                image: <img src={user.picture.large} alt=\"Image of a person\"/>,\r\n                name: user.name.first + \" \" + user.name.last,\r\n                phone:  user.cell,\r\n                email:user.email,\r\n                dob: user.dob.date.split(\"T\")[0]\r\n            }\r\n            })\r\n        \r\n            console.log(\"newRows: \", rows)\r\n            setDatatable({columns: columns, rows: rows});\r\n\r\n\r\n            setLoading(false)\r\n\r\n        })\r\n        .catch(err => console.log(err))\r\n    }, [loading])\r\n\r\n    if(loading) {\r\n        return <div>loading...</div>;\r\n    }\r\n\r\n    else if(!users.length) {\r\n        return <div>Didnt get any users</div>;\r\n    }\r\n    else {\r\n        return <MDBDataTableV5 hover entriesOptions={[5, 20, 25]} entries={5} pagesAmount={4} data={datatable} searchTop searchBottom={false} />;\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className=\"container\" style={props.style}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react'\r\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \r\nimport \"./style.css\"\r\n\r\n\r\nexport function Jumbotron(props) {\r\n\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid bg-info\">\r\n            <div className=\"container text-center\">\r\n                <h1 className = \"display-4\">Employee Directory</h1>\r\n                <p>Please user our searchbar below to find and sort any particular empoyees you may be looking for.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Jumbotron\r\n","import React from 'react';\nimport './App.css';\nimport TopSearch from \"./Components/TopSearch/\"\nimport Container from \"./Components/Container\"\nimport Jumbotron from \"./Components/Jumbotron\"\n\nfunction App() {\n  return (\n    <div>\n      <Jumbotron />\n      <Container>\n        <TopSearch />\n      </Container>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}